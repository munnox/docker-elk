version: '2.2'

# Info on elastic certificate utils
# https://www.elastic.co/guide/en/elasticsearch/reference/current/certutil.html

services:
  create_certs:
    container_name: create_certs
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    command: >
      bash -c '
        yum install -y -q -e 0 unzip;
        if [[ ! -f /certs/bundle.zip ]]; then
          bin/elasticsearch-certutil cert --silent --pem --keep-ca-key --in /local/instances.yml -out /certs/bundle.zip;
          unzip /certs/bundle.zip -d /certs;
          openssl pkcs8 -in /certs/logstash/logstash.key -topk8 -nocrypt /certs/logstash/logstash.p8
          # openssl pkcs8 -in /certs/logstash_client/logstash.key -topk8 -nocrypt /certs/logstash/logstash_client.p8
        fi;
        chown -R 1000:0 /certs
      '
    user: "0"
    working_dir: /usr/share/elasticsearch
    volumes: ['./certs:/certs', '.:/local/']
  create_reqs:
    container_name: create_reqs
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    command: >
      bash -c '
        yum install -y -q -e 0 unzip;
        rm -rf /certs/
        if [[ ! -f /certs/bundle.zip ]]; then
          bin/elasticsearch-certutil csr --silent --in /local/instances.yml -out /certs/bundle.zip;
          unzip /certs/bundle.zip -d /certs; 
        fi;
        chown -R 1000:0 /certs
      '
    user: "0"
    working_dir: /usr/share/elasticsearch
    volumes: ['./certs:/certs', '.:/local/']
  recreate_certs:
    container_name: create_certs
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    command: >
      bash -c '
        rm -rf /certs/bundle.zip
        yum install -y -q -e 0 unzip;
        if [[ ! -f /certs/bundle.zip ]]; then
          bin/elasticsearch-certutil cert --silent --pem --ca-cert /certs/ca/ca/crt --ca-key /certs/ca/ca.key --in /local/instances.yml -out /certs/bundle.zip;

          unzip /certs/bundle.zip -d /certs; 
        fi;
        chown -R 1000:0 /certs
      '
    user: "0"
    working_dir: /usr/share/elasticsearch
    volumes: ['./certs:/certs', '.:/local/']
  edit_certs:
    container_name: edit_certs
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    command: >
      bash -c '
        yum install -y -q -e 0 openssl vim git rsync;
        bash
      '
    user: "0"
    working_dir: /usr/share/elasticsearch
    volumes: ['./certs:/certs', '.:/local/']
  copy_out_all:
    container_name: copy_out_certs
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    command: cp -r /certs/ /out_certs/
    user: "0"
    working_dir: /usr/share/elasticsearch
    volumes: ['./certs:/certs', './local_certs/:/out_certs/']
  copy_out_certs:
    container_name: copy_out_certs
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    command: >
      bash -c "
        yum install rsync;
        rsync -a --prune-empty-dirs --include '*/' --include '*.crt' --exclude '*' /certs/ /out_certs/
      "
    user: "0"
    volumes: ['./certs:/certs', './local_certs/:/out_certs/']
  copy_out_reqs:
    container_name: copy_out_reqs
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    command: >
      bash -c "
        yum install rsync;
        rsync -a --prune-empty-dirs --include '*/' --include '*.csr' --exclude '*' /certs/ /out_certs/
      "
    user: "0"
    volumes: ['./certs:/certs', './local_certs/:/out_certs/']
  copy_in_certs:
    container_name: copy_certs
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    command: >
      bash -c "
        yum install rsync;
        rsync -a --prune-empty-dirs --include '*/' --include '*.crt' --exclude '*' /in_certs/ /certs/
      "
    user: "0"
    volumes: ['./certs:/certs', './local_certs/:/in_certs/']


# volumes: {"certs"}
