# Input plugins https://www.elastic.co/guide/en/logstash/current/input-plugins.html
# https://www.elastic.co/guide/en/logstash/current/plugins-inputs-stdin.html
input {
  # stdin {
  #   id => "logstash_stdin"
  #   add_field => ["[@metadata][beat]", "logstash"]
  #   add_field => ["[@metadata][version]", "7.3.2"]
  #   add_field => ["[@metadata][source]", "stdin"]
  #   add_field => ["host", "local"]
  #   add_field => ["[@metadata][ram_input_type]", "local"]
  # }
  # # https://www.elastic.co/guide/en/logstash/current/plugins-inputs-tcp.html
  # tcp {
  #   id => "basic_tcp_input"
  #   port => 5000
  #   add_field => ["[@metadata][ram_input_type]", "tcp"]
  #   tags => ['tcpport']
  # }
  # https://www.elastic.co/guide/en/logstash/current/plugins-inputs-syslog.html
  syslog {
    id => "basic_syslog_input"
    port => 5514
    # add_field => ["host", "syslog"]
    add_field => ["[@metadata][beat]", "logstash"]
    add_field => ["[@metadata][version]", "7.4.0"]
    add_field => ["[@metadata][ram_input_type]", "syslog"]
    tags => ['syslog']
  }
  # https://www.elastic.co/guide/en/logstash/current/plugins-inputs-beats.html
  # Security the interbeat communications
  # https://www.elastic.co/guide/en/beats/filebeat/current/configuring-ssl-logstash.html
  beats {
    id => "basic_beat_input"
    port => 5044
    ssl => true
    ssl_certificate_authorities => ["/certs/ca/ca.crt"]
    ssl_certificate => "/certs/logstash/logstash.crt"
    ssl_key => "/certs/logstash/logstash.p8"
    # ssl_verify_mode => "force_peer"
    tags => ['beat']
    add_field => ["[@metadata][ram_input_type]", "beat"]
  }

}

## Add your filters / logstash plugins configuration here
# https://www.elastic.co/guide/en/logstash/current/filter-plugins.html
filter {
  if [log][source][address] =~ "192.168.1.1" {
    mutate {
      id => "identify edgerouter gateway"
      add_field => {
        "[@metadata][t]" => "%{[@timestamp]} Europe/London"
      }
      add_tag => ["gateway"]
    }
    date {
      id => "Adjust gateway time to UTC from BST"
      match => ["[@metadata][t]", "yyy-MM-dd'T'HH:mm:ss.SSS'Z' ZZZ"]
    }
  
    grok {
      id => "Session Log Parser Gateway 192.168.1.1"
      match => {
        "message" => [
          "%{SPACE}%{WORD:ubiquity.start_user} : TTY=%{WORD:ubiquity.tty} ; PWD=%{PATH:process.working_directory} ; USER=%{USER:user.name} ; COMMAND=%{GREEDYDATA:ubiquity.command}"
          "%{GREEDYDATA:ubiquity.raw_log_type}: session %{WORD:event.outcome} for user  USER=%{USER:user.name} by \(uid=%{NUMBER:user.id}\)"
          "%{GREEDYDATA:ubiquity.raw_log_type}: session %{WORD:event.outcome} for user  USER=%{USER:user.name}"
        ]
      }
    }

    if "seesion" in [tags] {

    }
    else {
      grok  {
        id => "Parse EdgeRouter Firewall Log"
        match => {
          "message" => [
            "\[%[DATA:iptables.ubiquity.rule_set}-%{WORD:iptables.ubiquity.rule_number}-%{WORD:event.outcome}\]IN=%{DATA:ubiquity.source.interface} OUT=%{DATA:ubiquity.destination.interface} MAC=%{MAC:source.mac}:&{MAC:destination.mac}:%{DATA:ubiquity.firewall.rest_mac} SRC=%{IPV4:source.ip} DST=%{IPV4:destination.ip} LEN=%{NUMBER:iptables.length:int} TOS=0x%{BASE16NUM:iptables.tos} PREC=0x%{BASE16NUM:iptables.precedance_bits} TTL=%{NUMBER:iptables.ttl:int} ID=%{NUMBER:iptables.id:int} %{GREEDYDATA:ubiquity.firewall.packet_info}"
            "\[%[DATA:iptables.ubiquity.rule_set}-%{WORD:iptables.ubiquity.rule_number}-DNAT\] IN=%{DATA:ubiquity.source.interface} OUT= MAC=%{MAC:source.mac}:&{MAC:destination.mac}:%{DATA:ubiquity.firewall.rest_mac} SRC=%{IPV4:source.ip} DST=%{IPV4:destination.ip} LEN=%{NUMBER:iptables.length:int} TOS=0x%{BASE16NUM:iptables.tos} PREC=0x%{BASE16NUM:iptables.precedance_bits} TTL=%{NUMBER:iptables.ttl:int} ID=%{NUMBER:iptables.id:int} %{GREEDYDATA:ubiquity.firewall.packet_info}"
          ]
        }
        add_field => { "network.type" => "ipv4"}
        add_tag => [ "firewall", "rule"]
        remove_tag => ["dissect_parsing_error", "dissect_parsing_error", "dissect_parsing_error"]
      }

      if "rule" in [tags] {
        mutate {
          id => "Convert rule action into simple text as is used in example visualisations"
          gsub => [
            "event.outcome", "A", "allow",
            "event.outcome", "D", "delay",
          ]
        }
      }
    }

    if ("iptables" in [tags] or ("syslog" in [tags])) {
      # Add ip look ups here is required
    }
  }
  # grok {
  #   match => {
  #     "message" => [
  #       "%{GREEDYDATA}"
  #     ]
  #   }
  #   add_tag => ['matched']
  # }
  #   grok {
  #   match => {
  #     "message" => [
  #       "\<%{NUMBER:unifi.log.code}\>%{GREEDYDATA}U4PG2"
  #     ]
  #   }
  #   add_tag => ['access_point']
  # }
  # if [host] =~ "local" {
  #   mutate {
  #     add_field => ["comment", "host=local detected"]
  #     add_field => ["meta", "%{[@metadata]}"]
  #   }
  # }
  # if "_grokparsefailure" in [tags] {
  #   mutate {
  #     add_field => ["error", "Parsing error"]
  #     add_field => ["index", "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd.HH.mm.ss}"]
  #   }
  # }
}

# Output plugins https://www.elastic.co/guide/en/logstash/current/output-plugins.html
output {
  # if "syslog" in [tags] {
  #   stdout {
  #     id => "localtesting_syslogonly"
  #     codec => rubydebug {
  #       metadata => true
  #     }
  #   }
  # }
  # if "beat" in [tags] {
  #   stdout {
  #     id => "localtesting_syslogonly"
  #     codec => rubydebug {
  #       metadata => true
  #     }
  #   }   
  # }
  if "beat" in [tags] and [@metadata][beat] != "packetbeat" and [@metadata][beat] != "filebeat" {
    stdout {
      id => "localtesting_winlogbeat"
      codec => rubydebug {
        metadata => true
      }
    }
  }
  elasticsearch {
    id => "final_stash"
    hosts => "https://esa:9200"
    user => "elastic"
    password => "PleaseChangeMe"
    ssl => true
    cacert => '/certs/ca/ca.crt'
    ssl_certificate_verification => true
  #   # Configuring to forward event from beat connected to this logstash instance
  #   # https://www.elastic.co/guide/en/elastic-stack-get-started/7.4/get-started-elastic-stack.html#logstash-setup
  #   # manage_template => false
  #   # # When not using ILM
  #   # index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
  #   # When using ILM
  #   index => "%{[@metadata][beat]}-%{[@metadata][version]}"
  #   index => "%{[@metadata][beat]}-%{[@metadata][version]}"
  #   ilm_enabled => true
  #   ilm_rollover_alias => "logstash_write"
  #   ilm_pattern => "%{+YYYY.MM.dd.HH.mm.ss}-000001"
  #   ilm_policy => "test_policy"
  }
}
