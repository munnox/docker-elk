version: '3.2'

services:
  es01:
    # container_name: es01
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    restart: $RESTART
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: certs
        target: $CERTS_DIR
        read_only: true
      - type: volume
        source: data01
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - node.name=es01
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02
      - "ES_JAVA_OPTS=-Xmx256m -Xms256m"
      - ELASTIC_PASSWORD=$ELASTIC_PASSWORD
      - xpack.license.self_generated.type=basic 
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=$CERTS_DIR/es01/es01.key
      - xpack.security.http.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.http.ssl.certificate=$CERTS_DIR/es01/es01.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate 
      - xpack.security.transport.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.transport.ssl.certificate=$CERTS_DIR/es01/es01.crt
      - xpack.security.transport.ssl.key=$CERTS_DIR/es01/es01.key
    networks:
      - elk
    healthcheck:
      test: curl --cacert $CERTS_DIR/ca/ca.crt -s https://localhost:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5
  es02:
    # container_name: es02
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    restart: $RESTART
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: certs
        target: $CERTS_DIR
        read_only: true
      - type: volume
        source: data02
        target: /usr/share/elasticsearch/data
    # ports:
    #   - "9200:9200"
    #   - "9300:9300"
    environment:
      - node.name=es02
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02
      - "ES_JAVA_OPTS=-Xmx256m -Xms256m"
      - ELASTIC_PASSWORD=$ELASTIC_PASSWORD
      - xpack.license.self_generated.type=basic 
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=$CERTS_DIR/es02/es02.key
      - xpack.security.http.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.http.ssl.certificate=$CERTS_DIR/es02/es02.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate 
      - xpack.security.transport.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.transport.ssl.certificate=$CERTS_DIR/es02/es02.crt
      - xpack.security.transport.ssl.key=$CERTS_DIR/es02/es02.key
    networks:
      - elk
    healthcheck:
      test: curl --cacert $CERTS_DIR/ca/ca.crt -s https://localhost:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  logstash:
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    restart: $RESTART
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        # read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        # read_only: true
      - type: volume
        source: certs
        target: /certs
        # read_only: true
    ports:
      - "5000:5000"
      - "9600:9600"
      - "5514:5514/udp"
      - "5044:5044/udp"
      - "5044:5044/tcp"
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
      # - xpack.monitoring.elasticsearch.ssl.certificate_authority=/certs/ca/ca.crt
    networks:
      - elk
    depends_on:
      - es01

  kibana:
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    restart: $RESTART
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
      - type: volume
        source: certs
        target: /usr/share/kibana/config/certs/
        # read_only: true
    ports:
      - "5601:5601"
    # environment:
      # - elasticsearch.ssl.certificateAuthorities=/usr/share/kibana/config/certs/ca/ca.crt
      # - server.ssl.enabled=true
      # - server.ssl.key=/certs/kibana/kibana.key
      # - server.ssl.certificate=/certs/kibana/kibana.crt
    networks:
      - elk
    depends_on:
      - es01
    # healthcheck:
    #     test: curl --cacert /certs/ca/ca.crt --user elastic:$ELASTIC_PASSWORD -s https://es01:9200 >/test.log; if [[ $$? == 481 ]]; then echo 0; else echo 1; fi
    #     interval: 30s
    #     timeout: 10s
    #     retries: 5

networks:
  elk:
    driver: bridge

volumes: {"certs", "data01", "data02"}
